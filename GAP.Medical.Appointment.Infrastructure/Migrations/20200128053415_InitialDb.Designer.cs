// <auto-generated />
using System;
using GAP.Medical.Appointment.Infrastructure.EntityFrameworkDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GAP.Medical.Appointment.Infrastructure.Migrations
{
    [DbContext(typeof(AppointmentContext))]
    [Migration("20200128053415_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GAP.Medical.Appointment.Domain.Appointments.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalSpecialtyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicalSpecialtyId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("GAP.Medical.Appointment.Domain.MedicaSpecialties.MedicalSpecialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicalSpecialties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b56a0a81-7d1e-4ae6-ab97-34d66807c314"),
                            Name = "General medicine"
                        },
                        new
                        {
                            Id = new Guid("f4ab8317-d992-4bf5-81e2-2e0b24d6c8f7"),
                            Name = "Odontology"
                        },
                        new
                        {
                            Id = new Guid("f992b696-d234-45cb-a7be-9a86129289d7"),
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = new Guid("5b1f17f3-0e0e-4f09-82fd-21688472aead"),
                            Name = "Neurology"
                        });
                });

            modelBuilder.Entity("GAP.Medical.Appointment.Domain.Patients.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d08a8eb-bc49-49b0-9a47-aadbb4ca94c1"),
                            CreationDate = new DateTime(2020, 1, 28, 0, 34, 14, 773, DateTimeKind.Local).AddTicks(8369),
                            DocumentId = "1234",
                            Email = "juliantvi@gm.com",
                            IsActive = true,
                            LastName = "Toro",
                            Name = "Julian",
                            Password = "clave123",
                            PhoneNumber = "310438018",
                            Username = "juliantoro"
                        });
                });

            modelBuilder.Entity("GAP.Medical.Appointment.Domain.Appointments.Appointment", b =>
                {
                    b.HasOne("GAP.Medical.Appointment.Domain.MedicaSpecialties.MedicalSpecialty", "MedicalSpecialty")
                        .WithMany("Appointments")
                        .HasForeignKey("MedicalSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GAP.Medical.Appointment.Domain.Patients.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
